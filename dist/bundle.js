(()=>{"use strict";function e(e,t){const s={"top-left":[0],"top-right":[t-1],"bottom-left":[t*t-t],"bottom-right":[t*t-1],top:[...Array(t-2).keys()].map((e=>e+1)),bottom:[...Array(t-2).keys()].map((e=>e+1+t*(t-1))),left:[...Array(t-2).keys()].map((e=>(e+1)*t)),right:[...Array(t-2).keys()].map((e=>t*(e+2)-1))};for(const t in s)if(s[t].includes(e))return t;return"center"}function t(e,t){if("player"===t){const t=[...Array(e).keys()].map((t=>t*e)),s=t.map((e=>e+1));return t.concat(s)}const s=[...Array(e).keys()].map((t=>e*(t+1)-1)),a=s.map((e=>e-1));return s.concat(a)}function s(e,t){const s=new Set;for(;s.size!==t;)s.add(e[Math.floor(Math.random()*e.length)]);return Array.from(s)}function a(t,s,a,i){const{position:r}=t,{move:o}=t.character;let l=[],n=1;for(;n<o+1&&!["right","top-right"].includes(e(r-n,i))&&"left"!==e(r,i);)l.push(r-n),n+=1;for(n=1;n<o+1&&!["left","bottom-left"].includes(e(r+n,i))&&"right"!==e(r,i);)l.push(r+n),n+=1;for(n=1;n<o+1;)l.push(r-i*n),l.push(r+i*n),n+=1;for(n=1;n<o+1&&!["right","top-right"].includes(e(r-(i+1)*n,i))&&!["left","top-left","bottom-left"].includes(e(r,i));)l.push(r-(i+1)*n),n+=1;for(n=1;n<o+1&&!["right","bottom-right"].includes(e(r+(i-1)*n,i))&&!["left","top-left","bottom-left"].includes(e(r,i));)l.push(r+(i-1)*n),n+=1;for(n=1;n<o+1&&!["left","top-left"].includes(e(r-(i-1)*n,i))&&!["right","top-right","bottom-right"].includes(e(r,i));)l.push(r-(i-1)*n),n+=1;for(n=1;n<o+1&&!["left","bottom-left"].includes(e(r+(i+1)*n,i))&&!["right","top-right","bottom-right"].includes(e(r,i));)l.push(r+(i+1)*n),n+=1;return l=l.filter((e=>e>=0&&e<i*i&&!s.includes(e)&&!a.includes(e))),l}function i(t,s,a){const i=t.position,{attackRadius:r}=t.character;let o=[],l=1;const n=[];for(n.push(i);l<r+1;)n.push(i-a*l),n.push(i+a*l),l+=1;l=1;for(const t of n){for(;l<r+1&&!["right","top-right","bottom-right"].includes(e(t-l,a))&&!["left","top-left","bottom-left"].includes(e(t,a));)o.push(t-l),l+=1;for(l=1;l<r+1&&!["left","bottom-left"].includes(e(t+l,a))&&!["right","top-right","bottom-right"].includes(e(t,a));)o.push(t+l),l+=1;l=1}return o=o.concat(n),o=o.filter((e=>s.includes(e))),o}class r{constructor(){this.boardSize=8,this.teamSize=3,this.container=null,this.boardEl=null,this.cells=[],this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.newGameListeners=[],this.saveGameListeners=[],this.loadGameListeners=[]}bindToDOM(e){if(!(e instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=e}drawUi(t){this.checkBinding(),this.container.innerHTML='\n      <div class="controls">\n        <button data-id="action-restart" class="btn">New Game</button>\n        <button data-id="action-save" class="btn">Save Game</button>\n        <button data-id="action-load" class="btn">Load Game</button>\n      </div>\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.newGameEl=this.container.querySelector("[data-id=action-restart]"),this.saveGameEl=this.container.querySelector("[data-id=action-save]"),this.loadGameEl=this.container.querySelector("[data-id=action-load]"),this.newGameEl.addEventListener("click",(e=>this.onNewGameClick(e))),this.saveGameEl.addEventListener("click",(e=>this.onSaveGameClick(e))),this.loadGameEl.addEventListener("click",(e=>this.onLoadGameClick(e))),this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.classList.add(t);for(let t=0;t<this.boardSize**2;t+=1){const s=document.createElement("div");s.classList.add("cell","map-tile",`map-tile-${e(t,this.boardSize)}`),s.addEventListener("mouseenter",(e=>this.onCellEnter(e))),s.addEventListener("mouseleave",(e=>this.onCellLeave(e))),s.addEventListener("click",(e=>this.onCellClick(e))),this.boardEl.appendChild(s)}this.cells=Array.from(this.boardEl.children)}redrawPositions(e){for(const e of this.cells)e.innerHTML="";for(const s of e){const e=this.boardEl.children[s.position],a=document.createElement("div");a.classList.add("character",s.character.type);const i=document.createElement("div");i.classList.add("health-level");const r=document.createElement("div");r.classList.add("health-level-indicator","health-level-indicator-"+((t=s.character.health)<15?"critical":t<50?"normal":"high")),r.style.width=`${s.character.health}%`,i.appendChild(r),a.appendChild(i),e.appendChild(a)}var t}addCellEnterListener(e){this.cellEnterListeners.push(e)}addCellLeaveListener(e){this.cellLeaveListeners.push(e)}addCellClickListener(e){this.cellClickListeners.push(e)}addNewGameListener(e){this.newGameListeners.push(e)}addSaveGameListener(e){this.saveGameListeners.push(e)}addLoadGameListener(e){this.loadGameListeners.push(e)}onCellEnter(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellEnterListeners.forEach((e=>e.call(null,t)))}onCellLeave(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellLeaveListeners.forEach((e=>e.call(null,t)))}onCellClick(e){const t=this.cells.indexOf(e.currentTarget);this.cellClickListeners.forEach((e=>e.call(null,t)))}onNewGameClick(e){e.preventDefault(),this.newGameListeners.forEach((e=>e.call(null)))}onSaveGameClick(e){e.preventDefault(),this.saveGameListeners.forEach((e=>e.call(null)))}onLoadGameClick(e){e.preventDefault(),this.loadGameListeners.forEach((e=>e.call(null)))}static showError(e){alert(e)}static showMessage(e){alert(e)}selectCell(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"yellow";this.deselectCell(e),this.cells[e].classList.add("selected",`selected-${t}`)}deselectCell(e){const t=this.cells[e];t.classList.remove(...Array.from(t.classList).filter((e=>e.startsWith("selected"))))}showCellTooltip(e,t){this.cells[t].title=e}hideCellTooltip(e){this.cells[e].title=""}showDamage(e,t){return new Promise((s=>{const a=this.cells[e],i=document.createElement("span");i.textContent=t,i.classList.add("damage"),a.appendChild(i),i.addEventListener("animationend",(()=>{a.removeChild(i),s()}))}))}setCursor(e){this.boardEl.style.cursor=e}checkBinding(){if(null===this.container)throw new Error("GamePlay not bind to DOM")}}const o="prairie",l="desert",n="arctic",c="mountain";class h{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"generic";if(this.level=e,this.attack=0,this.defence=0,this.health=50,this.type=t,"Character"===new.target.name)throw new Error("Нельзя создавать объект базового класса")}}const d={player:[class extends h{constructor(e){super(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"swordsman"),this.attack=40,this.defence=10,this.move=4,this.attackRadius=1}},class extends h{constructor(e){super(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"bowman"),this.attack=25,this.defence=25,this.move=2,this.attackRadius=2}},class extends h{constructor(e){super(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"magician"),this.attack=10,this.defence=40,this.move=1,this.attackRadius=4}}],enemy:[class extends h{constructor(e){super(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"daemon"),this.attack=10,this.defence=10,this.move=1,this.attackRadius=4}},class extends h{constructor(e){super(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"undead"),this.attack=40,this.defence=10,this.move=4,this.attackRadius=1}},class extends h{constructor(e){super(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"vampire"),this.attack=25,this.defence=25,this.move=2,this.attackRadius=2}}]};class m{constructor(e){this.characters=e}}function*u(e,t){for(;;){const s=e[Math.floor(Math.random()*e.length)],a=Math.floor(Math.random()*(Math.floor(t)-Math.ceil(1)+1))+1;yield new s(a)}}function p(e,t,s){const a=[];for(let i=0;s>i;i+=1){const s=u(e,t).next().value;for(let e=1;e<s.level;e+=1)s.attack=Math.max(s.attack,s.attack*((80+s.health)/100)),s.defence=Math.max(s.defence,s.defence*((80+s.health)/100));a.push(s)}return new m(a)}const y="pointer",v="crosshair",C="not-allowed";class g{constructor(e,t){if(!(e instanceof h))throw new Error("character must be instance of Character or its children");if("number"!=typeof t)throw new Error("position must be a number");this.character=e,this.position=t}}class f{static from(e){return{lastGameScore:e.lastGameScore,maxScore:e.maxScore,playerPositions:e.playerPositions,enemyPositions:e.enemyPositions,positionedCharacters:e.positionedCharacters,currentLevel:e.currentLevel,gameTurn:e.gameTurn}}}const P=new r;P.bindToDOM(document.querySelector("#game-container"));const L=new class{constructor(e){this.storage=e}save(e){this.storage.setItem("state",JSON.stringify(e))}load(){try{return JSON.parse(this.storage.getItem("state"))}catch(e){throw new Error("Invalid state")}}}(localStorage),b=new class{constructor(e,t){this.gamePlay=e,this.stateService=t,this.playerPositions=[],this.enemyPositions=[],this.positionedCharacters=[],this.selectedCharacter=void 0,this.selectedCharacterAvailableMoves=[],this.selectedCharacterAvailableAttacks=[],this.currentLevel=o,this.gameTurn="player",this.lastGameScore=0,this.maxScore=0}init(){this.playerPositions=[],this.enemyPositions=[],this.positionedCharacters=[],this.selectedCharacter=void 0,this.selectedCharacterAvailableMoves=[],this.selectedCharacterAvailableAttacks=[],this.currentLevel=o,this.gameTurn="player",this.lastGameScore=0,this.gamePlay.cellClickListeners=[],this.gamePlay.cellEnterListeners=[],this.gamePlay.cellLeaveListeners=[],this.gamePlay.newGameListeners=[],this.gamePlay.saveGameListeners=[],this.gamePlay.loadGameListeners=[],this.gamePlay.drawUi(this.currentLevel);const e=p(d.player,4,this.gamePlay.teamSize),a=p(d.enemy,4,this.gamePlay.teamSize);this.playerPositions=s(t(this.gamePlay.boardSize,"player"),this.gamePlay.teamSize),this.enemyPositions=s(t(this.gamePlay.boardSize,"enemy"),this.gamePlay.teamSize);for(let t=0;t<this.gamePlay.teamSize;t+=1)this.positionedCharacters.push(new g(e.characters[t],this.playerPositions[t])),this.positionedCharacters.push(new g(a.characters[t],this.enemyPositions[t]));this.gamePlay.redrawPositions(this.positionedCharacters),this.addListeners()}onCellClick(e){if(this.playerPositions.includes(e)){for(const t of this.playerPositions)t!==e&&this.gamePlay.deselectCell(t);this.gamePlay.selectCell(e),this.selectedCharacter=this.positionedCharacters.find((t=>t.position===e)),this.selectedCharacterAvailableMoves=a(this.selectedCharacter,this.playerPositions,this.enemyPositions,this.gamePlay.boardSize),this.selectedCharacterAvailableAttacks=i(this.selectedCharacter,this.enemyPositions,this.gamePlay.boardSize)}if(this.selectedCharacterAvailableMoves.includes(e)||this.selectedCharacterAvailableAttacks.includes(e)||this.playerPositions.includes(e)||r.showError("Недопустимое действие"),this.selectedCharacter&&this.selectedCharacterAvailableMoves.includes(e)&&(this.gamePlay.deselectCell(this.selectedCharacter.position),this.selectedCharacter.position=e,this.gameTurn="enemy",this.nextRound()),this.selectedCharacter&&this.selectedCharacterAvailableAttacks.includes(e)){const t=this.positionedCharacters.find((t=>t.position===e)),s=Math.max(this.selectedCharacter.character.attack-t.character.defence,.1*this.selectedCharacter.character.attack);(async()=>{await this.gamePlay.showDamage(e,s),t.character.health-=s,this.gamePlay.deselectCell(this.selectedCharacter.position),this.gamePlay.deselectCell(e),this.gameTurn="enemy",this.nextRound()})()}}onCellEnter(e){var t;(this.playerPositions.includes(e)||this.enemyPositions.includes(e))&&this.gamePlay.showCellTooltip(`🎖 ${(t=this.positionedCharacters.find((t=>t.position===e))).character.level} ⚔ ${t.character.attack} 🛡 ${t.character.defence} ❤ ${t.character.health}`,e),this.playerPositions.includes(e)?this.gamePlay.setCursor(y):this.selectedCharacter&&this.selectedCharacterAvailableMoves.includes(e)?(this.gamePlay.selectCell(e,"green"),this.gamePlay.setCursor(y)):this.selectedCharacter&&this.selectedCharacterAvailableAttacks.includes(e)?(this.gamePlay.selectCell(e,"red"),this.gamePlay.setCursor(v)):this.gamePlay.setCursor(C)}onCellLeave(e){(this.playerPositions.includes(e)||this.enemyPositions.includes(e))&&this.gamePlay.hideCellTooltip(e),(this.gamePlay.cells[e].classList.contains("selected-green")||this.gamePlay.cells[e].classList.contains("selected-red"))&&this.gamePlay.deselectCell(e)}onNewGameClick(){this.stateService.save(this.getProgressData()),this.init(),this.maxScore=this.stateService.load().maxScore}onSaveGameClick(){this.stateService.save(this.getProgressData())}onLoadGameClick(){const e=this.stateService.load();this.lastGameScore=e.lastGameScore,this.maxScore=e.maxScore,this.playerPositions=e.playerPositions,this.enemyPositions=e.enemyPositions,this.positionedCharacters=e.positionedCharacters,this.selectedCharacter=void 0,this.selectedCharacterAvailableMoves=[],this.selectedCharacterAvailableAttacks=[],this.currentLevel=e.currentLevel,this.gameTurn=e.gameTurn,this.gamePlay.drawUi(this.currentLevel),this.gamePlay.redrawPositions(this.positionedCharacters)}addListeners(){this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this)),this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this)),this.gamePlay.addCellClickListener(this.onCellClick.bind(this)),this.gamePlay.addNewGameListener(this.onNewGameClick.bind(this)),this.gamePlay.addSaveGameListener(this.onSaveGameClick.bind(this)),this.gamePlay.addLoadGameListener(this.onLoadGameClick.bind(this))}nextRound(){if(this.positionedCharacters=this.positionedCharacters.filter((e=>e.character.health>0)),[this.playerPositions,this.enemyPositions]=function(e){let t=e.filter((e=>["swordsman","bowman","magician"].includes(e.character.type)));t=Array.from(t,(e=>e.position));let s=e.filter((e=>["undead","vampire","daemon"].includes(e.character.type)));return s=Array.from(s,(e=>e.position)),[t,s]}(this.positionedCharacters),0===this.playerPositions.length)return this.gamePlay.redrawPositions(this.positionedCharacters),void r.showMessage(`Вы проиграли. Ваш текущий результат: ${this.stateService.load().lastGameScore}, Лучший результат за всё время: ${this.stateService.load().maxScore}`);0===this.enemyPositions.length&&this.nextLevel(),this.gamePlay.redrawPositions(this.positionedCharacters),this.selectedCharacterAvailableMoves=[],this.selectedCharacterAvailableAttacks=[],"enemy"===this.gameTurn&&this.enemyTurn()}nextLevel(){switch(this.lastGameScore+=1,this.currentLevel){case"prairie":this.currentLevel=l;break;case"desert":this.currentLevel=n;break;case"arctic":this.currentLevel=c;break;case"mountain":this.currentLevel=o;break;default:this.currentLevel="prairie"}this.gamePlay.drawUi(this.currentLevel);const e=p(d.enemy,4,this.gamePlay.teamSize);this.playerPositions=s(t(this.gamePlay.boardSize,"player"),this.playerPositions.length),this.enemyPositions=s(t(this.gamePlay.boardSize,"enemy"),this.gamePlay.teamSize);for(let e=0;e<this.playerPositions.length;e+=1)this.positionedCharacters[e].position=this.playerPositions[e],this.positionedCharacters[e].character.level<4&&(this.positionedCharacters[e].character.attack=Math.max(this.positionedCharacters[e].character.attack,this.positionedCharacters[e].character.attack*((80+this.positionedCharacters[e].character.health)/100)),this.positionedCharacters[e].character.defence=Math.max(this.positionedCharacters[e].character.defence,this.positionedCharacters[e].character.defence*((80+this.positionedCharacters[e].character.health)/100))),this.positionedCharacters[e].character.health=this.positionedCharacters[e].character.health+80>100?100:this.positionedCharacters[e].character.health+80,this.positionedCharacters[e].character.level=this.positionedCharacters[e].character.level+1>4?4:this.positionedCharacters[e].character.level+1;for(let t=0;t<this.gamePlay.teamSize;t+=1)this.positionedCharacters.push(new g(e.characters[t],this.enemyPositions[t]));this.gameTurn="player",this.gamePlay.redrawPositions(this.positionedCharacters)}enemyTurn(){const e=this.positionedCharacters.filter((e=>["undead","vampire","daemon"].includes(e.character.type)));e.sort(((e,t)=>t.character.attack-e.character.attack));for(const t of e){const e=i(t,this.playerPositions,this.gamePlay.boardSize);if(e.length>0){const s=this.positionedCharacters.find((t=>t.position===e[0])),a=Math.max(t.character.attack-s.character.defence,.1*t.character.attack);return void(async()=>{await this.gamePlay.showDamage(e[0],a),s.character.health-=a,this.gameTurn="player",this.nextRound()})()}}const t=e[0],s=a(t,this.enemyPositions,this.playerPositions,this.gamePlay.boardSize),r=Array.from(this.playerPositions,(e=>[e,Math.abs(t.position-e)])).sort(((e,t)=>e[1]-t[1]))[0][0],o=Array.from(s,(e=>[e,Math.abs(r-e)])).sort(((e,t)=>e[1]-t[1]))[0][0];t.position=o,this.gameTurn="player",this.nextRound()}getProgressData(){return this.lastGameScore>this.maxScore&&(this.maxScore=this.lastGameScore),f.from({maxScore:this.maxScore,lastGameScore:this.lastGameScore,playerPositions:this.playerPositions,enemyPositions:this.enemyPositions,positionedCharacters:this.positionedCharacters,selectedCharacter:void 0,selectedCharacterAvailableMoves:[],selectedCharacterAvailableAttacks:[],currentLevel:this.currentLevel,gameTurn:this.gameTurn})}}(P,L);b.init()})();